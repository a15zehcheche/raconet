{"version":3,"sources":["res/menu1.png","res/menu2.png","res/menu3.png","logo.svg","components/myheader.js","components/card.js","components/footer.js","components/navbar.js","screen/carta.js","screen/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Myheader","class","Component","Card","data-flickity","data-flickity-lazyload","menu1","menu2","menu3","style","backgroundColor","fontFamily","href","Carta","state","imgStyle","src","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,yECA3CD,EAAOC,QAAU,IAA0B,kC,yHCkB5BC,E,uKAVP,OACI,yBAAKC,MAAM,qBACX,yBAAKA,MAAM,qCAGT,wBAAIA,MAAM,2BAAV,iB,GAVSC,a,gDC8BRC,E,uKAtBP,OAGA,yBAAKF,MAAM,WAAWG,gBAAc,yCAChC,yBAAKH,MAAM,iBACP,yBAAKA,MAAM,sBACXI,yBAAwBC,OAE5B,yBAAKL,MAAM,iBACP,yBAAKA,MAAM,sBACXI,yBAAwBE,OAE5B,yBAAKN,MAAM,iBACP,yBAAKA,MAAM,sBACXI,yBAAwBG,Y,GAlBrBN,aCqBJF,E,uKApBP,OACE,4BAAQC,MAAM,eAEd,yBAAKA,MAAM,aACD,6BAER,yBAAKA,MAAM,OACT,yBAAKA,MAAM,+BACT,uBAAGA,MAAM,kBAAT,2D,GAbOC,aCcRC,E,uKAPP,OACI,yBAAKM,MANO,CACZC,gBAAgB,UAChBC,WAAY,WAISV,MAAM,2DAC3B,uBAAGA,MAAM,gBAAgBW,KAAK,KAA9B,mB,GATOV,aCkCJW,GC9BWX,Y,4MDGtBY,MAAQ,G,oGASJ,IAEMC,EAAW,CACb,MAAQ,QAEZ,OACG,yBAAKN,MANQ,GAMQR,MAAM,aACvB,yBAAMQ,MAAOM,EAAUC,IAAKV,MAC5B,yBAAMG,MAAOM,EAAUC,IAAKT,MAC5B,yBAAME,MAAOM,EAAUC,IAAKR,W,GApBvBN,cEOLe,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.193da3b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu1.2d1d1fe0.png\";","module.exports = __webpack_public_path__ + \"static/media/menu2.0589c0d4.png\";","module.exports = __webpack_public_path__ + \"static/media/menu3.63aa8289.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Myheader extends Component {\n    render() {\n        const mystyle = {\n            \n        }\n        return (\n            <div class=\"position-relative\">\n            <div class=\"bradcam_area breadcam_bg overlay\">\n              \n            </div>\n              <h1 class=\"title position-absolute\">La Carta</h1>\n            </div>   \n        );\n    }\n}\nexport default Myheader;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport menu1 from '../res/menu1.png';\nimport menu2 from '../res/menu2.png';\nimport menu3 from '../res/menu3.png';\n\n\nclass Card extends Component {\n    render() {\n        const mystyle = {\n        }\n        return (\n         \n\n        <div class=\"carousel\" data-flickity='{ \"fullscreen\": true, \"lazyLoad\": 1 }'>\n            <div class=\"carousel-cell\">\n                <img class=\"carousel-cell-image\"\n                data-flickity-lazyload={menu1} />\n            </div>\n            <div class=\"carousel-cell\">\n                <img class=\"carousel-cell-image\"\n                data-flickity-lazyload={menu2} />\n            </div>\n            <div class=\"carousel-cell\">\n                <img class=\"carousel-cell-image\"\n                data-flickity-lazyload={menu3} />\n            </div>\n        </div>\n\n            \n        );\n    }\n}\nexport default Card;\n\n/*\n   <div class=\"mt-5 mb-5 \" style = { mystyle } >\n                <div class=\"carousel\" data-flickity='{ \"fullscreen\": true }'>\n                    <img class=\"carousel-cell\" src={menu1}/>\n                    <img class=\"carousel-cell\" src={menu2}/>\n                    <img class=\"carousel-cell\" src={menu3}/>\n                </div>\n\n            </div>\n\n\n\n*/"," import React, { Component } from 'react';\nimport '../App.css';\n\nclass Myheader extends Component {\n    render() {\n        const mystyle = {\n            \n        }\n        return (\n          <footer class=\"site-footer\">\n\n          <div class=\"container\">\n                    <hr/>\n\n            <div class=\"row\">\n              <div class=\"col-md-8 col-sm-6 col-xs-12\">\n                <p class=\"copyright-text\">Copyright &copy; 2020 All Rights Reserved by Chen\n                </p>\n              </div>\n\n             \n            </div>\n          </div>\n          \n          </footer>  \n        );\n    }\n}\nexport default Myheader;\n/*\n <div class=\"col-md-4 col-sm-6 col-xs-12\">\n     <p class=\"float-right color-black\"><a href=\"#\">Back to top</a></p>\n  </div>\n*/","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Card extends Component {\n    render() {\n        const mystyle = {\n            backgroundColor:'#26272b',\n            fontFamily: 'Lobster',\n\n        }\n        return (\n            <nav style={mystyle} class=\"navbar navbar-expand navbar-dark justify-content-center\">\n            <a class=\"navbar-brand \" href=\"#\">El Raconet</a>\n          </nav>\n        );\n    }\n}\nexport default Card;\n\n\n","import React, { Component } from 'react';\nimport '../App.css';\n\n\nimport menu1 from '../res/menu1.png';\nimport menu2 from '../res/menu2.png';\nimport menu3 from '../res/menu3.png';\n\nclass Carta extends Component {\n\n    state = {\n    }\n\n  \n    componentDidMount() {\n    \n    }\n   \n    render() {\n        const mystyle = {            \n        }\n        const imgStyle = {\n            'width':'100%',\n        }\n        return (\n           <div style={mystyle} class=\"share m-1\" >\n               <img  style={imgStyle} src={menu1}/>\n               <img  style={imgStyle} src={menu2}/>\n               <img  style={imgStyle} src={menu3}/>\n               \n           </div>\n   \n        )\n\n    };\n}\n\nexport default Carta;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Myheader from '../components/myheader'\nimport Card from '../components/card'\nimport Myfooter from '../components/footer'\nimport Navbar from '../components/navbar'\n\nclass StartScreen extends Component {\n\n    state = {\n    }\n\n  \n    componentDidMount() {\n    \n    }\n    render() {\n        return (\n            <>\n                <Navbar/>\n                <Myheader></Myheader>\n                <div class=\"main_box\">\n                    <div class=\"container \">\n                        <Card></Card>\n                    </div>\n                </div>\n            \n                <Myfooter></Myfooter>\n            </>\n        )\n\n    };\n}\n\nexport default StartScreen;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePage from './screen/home'\nimport Carta from './screen/carta'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Carta/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}